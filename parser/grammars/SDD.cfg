Program -> { new symbol_table(); }
           Stmts

Stmts -> Stmts
         Stmt

Stmts -> Epsilon

Stmt -> TYPE
        ID { ENTRY_CHECK; ADD_ID(TYPE.tag, ID.lexeme); }
        ;

Stmt -> TYPE
        ID { ENTRY_CHECK; ADD_ID(TYPE.tag, ID.lexeme); }
        =
        Expr
        ;

Stmt -> ID { ID_EXIST_CHECK}
        =
        Expr
        ;

Expr -> Expr
        +
        Term { 0.entry = new Entry();
               TYPE_CHECK
               gen(0.entry '=' 1.entry '+' 2.entry);}

Expr -> Expr
        -
        Term { 0.entry = new Entry();
               TYPE_CHECK
               gen(0.entry '=' 1.entry '-' 2.entry); }

Expr -> Term { Expr.entry = Term.entry; }

Term -> Term
        *
        Unary { 0.entry = new Entry();
                TYPE_CHECK
                gen(0.entry '=' 1.entry '*' 2.entry); }

Term -> Term
        /
        Unary { 0.entry = new Entry();
                TYPE_CHECK
                gen(0.entry '=' 1.entry '/' 2.entry); }

Term -> Unary { Term.entry = Unary.entry; }

Unary -> -
         Unary { 0.entry = new Entry();
                 gen(0.entry '=' 'minus' 2.entry); }

Unary -> Factor { Unary.entry = Factor.entry; }

Factor -> ( Expr ) { Factor.entry = Expr.entry; }
Factor -> ID       { Factor.entry = ID.lexeme; }
// to_string()
Factor -> INTEGER  { Factor.entry = INTEGER.val; }
Factor -> FLOAT    { Factor.entry = FLOAT.val; }
